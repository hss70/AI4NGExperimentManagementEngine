AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: AI4NG Question Engine using existing API Gateway

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
  SharedApiId:
    Type: String
    Description: The API Gateway ID from the shared API stack
  SharedApiAuthorizerId:
    Type: String
    Description: The Cognito authorizer ID from the shared API stack
  PrivateSG:
    Type: String
    Description: Private security group ID from network stack
  PrivateSubnetIds:
    Type: CommaDelimitedList
    Description: Private subnet IDs from network stack

Resources:
  # DynamoDB Tables
  AI4NGExperimentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub AI4NGExperiments-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  AI4NGResponsesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub AI4NGResponses-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
        - AttributeName: GSI2PK
          AttributeType: S
        - AttributeName: GSI2SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI2
          KeySchema:
            - AttributeName: GSI2PK
              KeyType: HASH
            - AttributeName: GSI2SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  AI4NGQuestionnairesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub AI4NGQuestionnaires-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI3PK
          AttributeType: S
        - AttributeName: GSI3SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI3
          KeySchema:
            - AttributeName: GSI3PK
              KeyType: HASH
            - AttributeName: GSI3SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  ###################################
  # Researcher Cognito User Pool (no hosted UI)
  ###################################
  ResearcherUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ai4ng-researchers-${Environment}
      UsernameAttributes: [email]
      AutoVerifiedAttributes: [email]
      MfaConfiguration: "OFF"
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false

  ResearcherUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ai4ng-researcher-client
      UserPoolId: !Ref ResearcherUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthFlowsUserPoolClient: false
      SupportedIdentityProviders:
        - COGNITO
  ResearcherAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref SharedApiId
      AuthorizerType: JWT
      Name: ResearcherAuthorizer
      IdentitySource:
        - "$request.header.Authorization"
      JwtConfiguration:
        Issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${ResearcherUserPool}"
        Audience:
          - !Ref ResearcherUserPoolClient

  # Lambda Functions
  ExperimentsApi:
    Type: AWS::Serverless::Function
    Properties:
      Handler: AI4NGExperimentsLambda::AI4NGExperimentsLambda.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnet8
      CodeUri: ../src/AI4NGExperimentsLambda
      Timeout: 30
      MemorySize: 512
      Tracing: Active
      LoggingConfig:
        LogFormat: JSON
        ApplicationLogLevel: INFO
        SystemLogLevel: INFO
      VpcConfig:
        SecurityGroupIds:
          - !Ref PrivateSG
        SubnetIds: !Ref PrivateSubnetIds
      Environment:
        Variables:
          EXPERIMENTS_TABLE: !Ref AI4NGExperimentsTable
          RESPONSES_TABLE: !Ref AI4NGResponsesTable
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref AI4NGExperimentsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AI4NGResponsesTable

  ResponsesApi:
    Type: AWS::Serverless::Function
    Properties:
      Handler: AI4NGResponsesLambda::AI4NGResponsesLambda.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnet8
      CodeUri: ../src/AI4NGResponsesLambda
      Timeout: 30
      MemorySize: 512
      Tracing: Active
      LoggingConfig:
        LogFormat: JSON
        ApplicationLogLevel: INFO
        SystemLogLevel: INFO
      VpcConfig:
        SecurityGroupIds:
          - !Ref PrivateSG
        SubnetIds: !Ref PrivateSubnetIds
      Environment:
        Variables:
          RESPONSES_TABLE: !Ref AI4NGResponsesTable
          EXPERIMENTS_TABLE: !Ref AI4NGExperimentsTable
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref AI4NGResponsesTable
        - DynamoDBReadPolicy:
            TableName: !Ref AI4NGExperimentsTable

  QuestionnairesApi:
    Type: AWS::Serverless::Function
    Properties:
      Handler: AI4NGQuestionnairesLambda::AI4NGQuestionnairesLambda.LambdaEntryPoint::FunctionHandlerAsync
      Runtime: dotnet8
      CodeUri: ../src/AI4NGQuestionnairesLambda
      Timeout: 30
      MemorySize: 512
      Tracing: Active
      LoggingConfig:
        LogFormat: JSON
        ApplicationLogLevel: INFO
        SystemLogLevel: INFO
      VpcConfig:
        SecurityGroupIds:
          - !Ref PrivateSG
        SubnetIds: !Ref PrivateSubnetIds
      Environment:
        Variables:
          QUESTIONNAIRES_TABLE: !Ref AI4NGQuestionnairesTable
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - AWSXRayDaemonWriteAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref AI4NGQuestionnairesTable

  # API Gateway Integrations (using existing shared API)
  ExperimentsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SharedApiId
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExperimentsApi.Arn}/invocations
      PayloadFormatVersion: "2.0"
      IntegrationMethod: POST

  ResponsesIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SharedApiId
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResponsesApi.Arn}/invocations
      PayloadFormatVersion: "2.0"
      IntegrationMethod: POST

  QuestionnairesIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SharedApiId
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QuestionnairesApi.Arn}/invocations
      PayloadFormatVersion: "2.0"
      IntegrationMethod: POST

  ## Routes:
  # Experiments
  GetExperimentsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: GET /api/experiments
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${ExperimentsIntegration}

  GetExperimentByIdRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: GET /api/experiments/{experimentId}
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${ExperimentsIntegration}

  GetMyExperimentsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: GET /api/me/experiments
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${ExperimentsIntegration}

  CreateExperimentRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: POST /api/experiments
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${ExperimentsIntegration}

  UpdateExperimentRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: PUT /api/experiments/{experimentId}
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${ExperimentsIntegration}

  DeleteExperimentRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: DELETE /api/experiments/{experimentId}
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${ExperimentsIntegration}

  SyncExperimentsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: GET /api/experiments/sync
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${ExperimentsIntegration}

  GetExperimentMembersRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: GET /api/experiments/{experimentId}/members
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${ExperimentsIntegration}

  AddExperimentMemberRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: PUT /api/experiments/{experimentId}/members/{userSub}
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${ExperimentsIntegration}

  RemoveExperimentMemberRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: DELETE /api/experiments/{experimentId}/members/{userSub}
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${ExperimentsIntegration}

  # Responses Routes
  GetResponsesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: GET /api/responses
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${ResponsesIntegration}

  GetResponseByIdRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: GET /api/responses/{responseId}
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${ResponsesIntegration}

  CreateResponseRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: POST /api/responses
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${ResponsesIntegration}

  UpdateResponseRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: PUT /api/responses/{responseId}
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${ResponsesIntegration}

  DeleteResponseRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: DELETE /api/responses/{responseId}
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${ResponsesIntegration}

  # Questionnaire Routes
  GetQuestionnairesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: GET /api/questionnaires
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${QuestionnairesIntegration}

  GetQuestionnaireRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: GET /api/questionnaires/{questionnaireId}
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${QuestionnairesIntegration}

  CreateQuestionnaireRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: POST /api/questionnaires
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${QuestionnairesIntegration}

  UpdateQuestionnaireRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: PUT /api/questionnaires/{questionnaireId}
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${QuestionnairesIntegration}

  # Researcher Questionnaire Routes (Admin)
  CreateQuestionnaireResearcherRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: POST /api/researcher/questionnaires
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${QuestionnairesIntegration}

  UpdateQuestionnaireResearcherRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: PUT /api/researcher/questionnaires/{questionnaireId}
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${QuestionnairesIntegration}

  DeleteQuestionnaireResearcherRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: DELETE /api/researcher/questionnaires/{questionnaireId}
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${QuestionnairesIntegration}

  CreateQuestionnaireBatchRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: POST /api/researcher/questionnaires/batch
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${QuestionnairesIntegration}

  # Mobile Sync Routes
  SyncQuestionnairesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: GET /api/sync/questionnaires
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${QuestionnairesIntegration}

  SyncResponsesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SharedApiId
      RouteKey: GET /api/sync/responses
      AuthorizationType: JWT
      AuthorizerId: !Ref SharedApiAuthorizerId
      Target: !Sub integrations/${ResponsesIntegration}

  # Lambda Permissions
  ExperimentsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ExperimentsApi
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SharedApiId}/*/*

  ResponsesLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ResponsesApi
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SharedApiId}/*/*

  QuestionnairesLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref QuestionnairesApi
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SharedApiId}/*/*

Outputs:
  ExperimentsTableName:
    Value: !Ref AI4NGExperimentsTable
    Export:
      Name: !Sub AI4NG-ExperimentsTable-${Environment}

  ResponsesTableName:
    Value: !Ref AI4NGResponsesTable
    Export:
      Name: !Sub AI4NG-ResponsesTable-${Environment}

  QuestionnairesTableName:
    Value: !Ref AI4NGQuestionnairesTable
    Export:
      Name: !Sub AI4NG-QuestionnairesTable-${Environment}

  ExperimentsLambdaArn:
    Value: !GetAtt ExperimentsApi.Arn
    Export:
      Name: !Sub AI4NG-ExperimentsLambda-${Environment}

  ResponsesLambdaArn:
    Value: !GetAtt ResponsesApi.Arn
    Export:
      Name: !Sub AI4NG-ResponsesLambda-${Environment}

  QuestionnairesLambdaArn:
    Value: !GetAtt QuestionnairesApi.Arn
    Export:
      Name: !Sub AI4NG-QuestionnairesLambda-${Environment}
